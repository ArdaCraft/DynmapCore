package org.dynmap;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Properties;
import java.util.Random;

import org.dynmap.common.DynmapCommandSender;
import org.dynmap.common.DynmapPlayer;
import org.dynmap.servlet.LoginServlet;

public class WebAuthManager {
    private HashMap<String, String> pwdhash_by_userid = new HashMap<String, String>();
    private HashMap<String, String> pending_registrations = new HashMap<String, String>();
    private String hashsalt;
    private File pfile;
    public static final String WEBAUTHFILE = "webauth.txt";
    private static final String HASHSALT = "$HASH_SALT$";
    private static final String PWDHASH_PREFIX = "hash.";
    private Random rnd = new Random();
    private DynmapCore core;
    
    public WebAuthManager(DynmapCore core) {
        this.core = core;
        pfile = new File(core.getDataFolder(), WEBAUTHFILE);
        if(pfile.canRead()) {
            FileReader rf = null;
            try {
                rf = new FileReader(pfile);
                Properties p = new Properties();
                p.load(rf);
                hashsalt = p.getProperty(HASHSALT);
                for(String k : p.stringPropertyNames()) {
                    if(k.equals(HASHSALT)) {
                        hashsalt = p.getProperty(k);
                    }
                    else if(k.startsWith(PWDHASH_PREFIX)) { /* Load password hashes */
                        pwdhash_by_userid.put(k.substring(PWDHASH_PREFIX.length()).toLowerCase(), p.getProperty(k));
                    }
                }
            } catch (IOException iox) {
                Log.severe("Cannot read " + WEBAUTHFILE);
            } finally {
                if(rf != null) { try { rf.close(); } catch (IOException iox) {} }
            }
        }
        if(hashsalt == null) {  /* No hashsalt */
            hashsalt = Long.toHexString(rnd.nextLong());
        }
    }
    public boolean save() {
        boolean success = false;
        FileWriter fw = null;
        try {
            fw = new FileWriter(pfile);
            Properties p = new Properties();
            p.setProperty(HASHSALT, hashsalt);  /* Save salt */
            for(String k : pwdhash_by_userid.keySet()) {
                p.setProperty(PWDHASH_PREFIX + k, pwdhash_by_userid.get(k));
            }
            p.store(fw, "DO NOT EDIT THIS FILE");
            success = true;
        } catch (IOException iox) {
            Log.severe("Error writing " + WEBAUTHFILE);
        } finally {
            if(fw != null) { try { fw.close(); } catch (IOException iox) {} }
        }
        return success;
    }
    private String makeHash(String pwd) {
        String check = hashsalt + pwd;
        try {
            byte[] checkbytes = check.getBytes("UTF-8");
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] rslt = md.digest(checkbytes);
            String rslthash = "";
            for(int i = 0; i < rslt.length; i++) {
                rslthash += String.format("%02X", 0xFF & (int)rslt[i]);
            }
            return rslthash;
        } catch (NoSuchAlgorithmException nsax) {
        } catch (UnsupportedEncodingException uex) {
        }
        return null;
    }
    public boolean checkLogin(String uid, String pwd) {
        uid = uid.toLowerCase();
        if(uid.equals(LoginServlet.USERID_GUEST)) {
            return true;
        }
        String hash = pwdhash_by_userid.get(uid);
        if(hash == null) {
            return false;
        }
        if(core.getServer().isPlayerBanned(uid)) {
            return false;
        }
        String checkhash = makeHash(pwd);
        return hash.equals(checkhash);
    }
    public boolean registerLogin(String uid, String pwd, String passcode) {
        uid = uid.toLowerCase();
        if(uid.equals(LoginServlet.USERID_GUEST)) {
            return false;
        }
        if(core.getServer().isPlayerBanned(uid)) {
            return false;
        }
        passcode = passcode.toLowerCase();
        String kcode = pending_registrations.remove(uid);
        if(kcode == null) {
            return false;
        }
        if(!kcode.equals(passcode)) {
            return false;
        }
        String hash = makeHash(pwd);
        pwdhash_by_userid.put(uid, hash);
        return save();
    }
    public boolean unregisterLogin(String uid) {
        if(uid.equals(LoginServlet.USERID_GUEST)) {
            return true;
        }
        uid = uid.toLowerCase();
        pwdhash_by_userid.remove(uid);
        return save();
    }
    public boolean isRegistered(String uid) {
        if(uid.equals(LoginServlet.USERID_GUEST)) {
            return false;
        }
        uid = uid.toLowerCase();
        return pwdhash_by_userid.containsKey(uid);
    }
    public boolean processWebRegisterCommand(DynmapCore core, DynmapCommandSender sender, DynmapPlayer player, String[] args) {
        String uid = null;
        if(args.length > 1) {
            if(!core.checkPlayerPermission(sender, "webregister.other")) {
                sender.sendMessage("Not authorized to set web login information for other players");
                return true;
            }
            uid = args[1];
        }
        else if(player == null) {   /* Console? */
            sender.sendMessage("Must provide user ID to register web login");
        }
        else {
            uid = player.getName();
        }
        String regkey = String.format("%04d-%04d", rnd.nextInt(10000), rnd.nextInt(10000));
        pending_registrations.put(uid.toLowerCase(), regkey.toLowerCase());
        sender.sendMessage("Registration pending for user ID: " + uid);
        sender.sendMessage("Registration code: " + regkey);
        sender.sendMessage("Enter ID and code on registration web page (login.html) to complete registration");
        return true;
    }
}
